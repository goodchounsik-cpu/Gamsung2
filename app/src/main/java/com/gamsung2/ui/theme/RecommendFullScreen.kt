@file:OptIn(androidx.compose.material3.ExperimentalMaterial3Api::class)

package com.gamsung2.ui.theme

import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import com.gamsung2.nav.Routes

/* ÏßÄÏó≠ ÏÑºÌÑ∞(ThemeTravelScreenÍ≥º ÎèôÏùº) */
private val REGION_CENTER = mapOf(
    "ÏÑúÏö∏" to (37.5665 to 126.9780), "Î∂ÄÏÇ∞" to (35.1796 to 129.0756),
    "ÎåÄÍµ¨" to (35.8714 to 128.6014), "Ïù∏Ï≤ú" to (37.4563 to 126.7052),
    "Í¥ëÏ£º" to (35.1595 to 126.8526), "ÎåÄÏ†Ñ" to (36.3504 to 127.3845),
    "Ïö∏ÏÇ∞" to (35.5384 to 129.3114), "ÏÑ∏Ï¢Ö" to (36.4800 to 127.2890),
    "Í≤ΩÍ∏∞" to (37.4138 to 127.5183), "Í∞ïÏõê" to (37.8854 to 127.7298),
    "Ï∂©Î∂Å" to (36.6357 to 127.4913), "Ï∂©ÎÇ®" to (36.5184 to 126.8000),
    "Ï†ÑÎ∂Å" to (35.7175 to 127.1530), "Ï†ÑÎÇ®" to (34.8161 to 126.4629),
    "Í≤ΩÎ∂Å" to (36.4919 to 128.8889), "Í≤ΩÎÇ®" to (35.4606 to 128.2132),
    "Ï†úÏ£º" to (33.4996 to 126.5312)
)

/** ÎÇ¥Î∂Ä Ï†ÑÏö© ÏïÑÏù¥ÌÖú Î™®Îç∏(Ïù¥Î¶Ñ Ï∂©Îèå Î∞©ÏßÄÏö©) */
private data class RecoItem(
    val id: Int,
    val title: String,
    val desc: String,
    val emoji: String,
    val color: Color,
    val lat: Double,
    val lon: Double
)

/** group/region ÏïàÏ†ÑÍ∞í Î≥¥Ï†ï */
private fun normalizeGroup(raw: String): String = when (raw) {
    "Í∞ÄÏ°±", "Ïó∞Ïù∏", "ÏπúÍµ¨", "Îã®Ï≤¥", "ÌòºÏûê" -> raw
    else -> "Í∞ÄÏ°±"
}
private fun normalizeRegion(raw: String): String =
    if (REGION_CENTER.keys.contains(raw)) raw else "ÏÑúÏö∏"

/** ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±Í∏∞ */
private fun fakeItems(themeKey: String, group: String, region: String, count: Int): List<RecoItem> {
    val baseTitles: List<String> = when (themeKey) {
        "history" -> when (group) {
            "Í∞ÄÏ°±" -> listOf("Í≥†Í∂Å & Ï≤¥ÌóòÌïôÏäµ", "Ïó≠ÏÇ¨Î∞ïÎ¨ºÍ¥Ä+ÌÇ§Ï¶àÏ°¥", "Ìñ•Íµê Ï†ÑÌÜµÎÜÄÏù¥", "ÏÑ±Í≥Ω ÏÇ∞Ï±Ö")
            "Ïó∞Ïù∏" -> listOf("Í≥†Ï¶àÎÑâÌïú ÏÑúÏõêÍ∏∏", "ÏïºÍ≤Ω ÏÑ±Í≥Ω Ìà¨Ïñ¥", "Î∂ÅÏ¥å Í≥®Î™© ÏÇ¨ÏßÑ", "Ï†ÑÌÜµÏ∞ªÏßë")
            "ÏπúÍµ¨" -> listOf("Í∑ºÎåÄÍ≥®Î™© Ìà¨Ïñ¥", "ÏÑ±Î≤Ω ÌååÎÖ∏ÎùºÎßà", "ÎØ∏Ïà†Í¥Ä+Ïπ¥Ìéò", "ÏïºÏãúÏû•")
            "Îã®Ï≤¥" -> listOf("Ìï¥ÏÑ§ ÎèôÌñâ", "ÎåÄÌòï Î∞ïÎ¨ºÍ¥Ä", "Î≤ÑÏä§ Ìà¨Ïñ¥", "Ïú†Ï†ÅÏßÄ ÎùºÏù∏ÏóÖ")
            else   -> listOf("ÌòºÏûê Í≥†Í∂Å ÏÇ∞Ï±Ö", "ÏûëÏùÄ Î∞ïÎ¨ºÍ¥Ä", "Î¨∏ÌôîÏÑúÏ†ê", "ÏòõÍ∏∏ ÏÇ∞Ï±Ö")
        }
        "healing" -> listOf("Ïà≤ÏπòÏú† ÏÇ∞Ï±Ö", "Ïò®Ï≤ú Ìú¥Ïãù", "Ìò∏Ïà´Í∞Ä ÌîºÌÅ¨Îãâ", "Î≥ÑÎ≥¥Í∏∞")
        "bike"    -> listOf("ÌïòÏ≤ú ÏûêÏ†ÑÍ±∞Í∏∏", "Ìò∏Ïàò ÏàúÌôò", "Ìï¥Ïïà ÎùºÏù¥Îî©", "ÏóÖÌûê ÎèÑÏ†Ñ")
        else      -> listOf("ÎåÄÌëú Î™ÖÏÜå", "ÏïºÍ≤Ω Ìè¨Ïù∏Ìä∏", "Ïπ¥Ìéò ÎùºÏö¥Îî©", "Ìè¨ÌÜ† Ïä§Ìåü")
    }
    val emojis = listOf("üèûÔ∏è","üèØ","üåø","üì∏","üó∫Ô∏è","üçú","üèñÔ∏è","üö¥")
    val colors = listOf(
        Color(0xFFBEE3F8), Color(0xFFC6F6D5), Color(0xFFFFE6A7), Color(0xFFFFD5E5),
        Color(0xFFE9D5FF), Color(0xFFFFF3BF), Color(0xFFD1FAE5), Color(0xFFE0E7FF)
    )
    val center = REGION_CENTER[region] ?: (37.5665 to 126.9780)

    return List(count) { i ->
        val jitter = 0.01 * ((i % 5) - 2)
        RecoItem(
            id = i + 1,
            title = baseTitles[i % baseTitles.size] + " ${i + 1}",
            desc  = "2~3ÏãúÍ∞Ñ ÏΩîÏä§ ¬∑ Ï¥àÎ≥¥ Ï∂îÏ≤ú",
            emoji = emojis[i % emojis.size],
            color = colors[i % colors.size],
            lat = center.first + jitter,
            lon = center.second + jitter
        )
    }
}

@Composable
fun RecommendFullScreen(
    navController: NavHostController,
    themeKey: String,
    group: String,
    region: String
) {
    // ÌååÎùºÎØ∏ÌÑ∞ ÏïàÏ†ÑÌôî
    val safeGroup = remember(group) { normalizeGroup(group) }
    val safeRegion = remember(region) { normalizeRegion(region) }
    val center = REGION_CENTER[safeRegion] ?: (37.5665 to 126.9780)

    // ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞
    val items = remember(themeKey, safeGroup, safeRegion) {
        fakeItems(themeKey, safeGroup, safeRegion, count = 50)
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("$safeRegion ¬∑ Ï∂îÏ≤ú ÏΩîÏä§ Ï†ÑÏ≤¥") },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Îí§Î°ú")
                    }
                },
                actions = {
                    TextButton(onClick = {
                        navController.navigate(
                            Routes.categoryPlaceListRoute(
                                category = "lodging",
                                title = "ÏàôÏÜå Ï∞æÍ∏∞",
                                themeTitle = "$safeRegion Ï∂îÏ≤ú ÏΩîÏä§ Í∑ºÏ≤ò",
                                lat = center.first, lng = center.second, radiusKm = 3.0
                            )
                        )
                    }) { Text("ÏàôÏÜå ÎÑìÍ≤å Î≥¥Í∏∞") }

                    TextButton(onClick = {
                        navController.navigate(
                            Routes.categoryPlaceListRoute(
                                category = "restaurant",
                                title = "ÏãùÎãπ Ï∞æÍ∏∞",
                                themeTitle = "$safeRegion Ï∂îÏ≤ú ÏΩîÏä§ Í∑ºÏ≤ò",
                                lat = center.first, lng = center.second, radiusKm = 3.0
                            )
                        )
                    }) { Text("ÏãùÎãπ ÎÑìÍ≤å Î≥¥Í∏∞") }
                }
            )
        }
    ) { inner ->
        if (items.isEmpty()) {
            Box(
                modifier = Modifier
                    .padding(inner)
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.surface),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "Ï∂îÏ≤ú ÏΩîÏä§Í∞Ä ÏóÜÏäµÎãàÎã§.",
                    style = MaterialTheme.typography.bodyLarge,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        } else {
            LazyVerticalGrid(
                columns = GridCells.Fixed(2),
                modifier = Modifier
                    .padding(inner)
                    .fillMaxSize()
                    .background(MaterialTheme.colorScheme.surface),
                verticalArrangement = Arrangement.spacedBy(14.dp),
                horizontalArrangement = Arrangement.spacedBy(14.dp),
                contentPadding = PaddingValues(16.dp)
            ) {
                items(items, key = { it.id }) { item ->
                    RecoCard(item = item) {
                        navController.navigate(
                            Routes.placeDetailRoute(
                                placeId   = "${themeKey}_${item.id}",
                                companion = safeGroup,
                                title     = item.title,
                                lat       = item.lat,
                                lon       = item.lon
                            )
                        )
                    }
                }
            }
        }
    }
}

/* Ïπ¥Îìú */
@Composable
private fun RecoCard(item: RecoItem, onClick: () -> Unit) {
    val bg = item.color.copy(alpha = 0.25f)
    Box(
        modifier = Modifier
            .fillMaxWidth()
            .height(150.dp)
            .background(bg, RoundedCornerShape(18.dp))
            .clickable(onClick = onClick)
            .padding(14.dp)
    ) {
        Column(Modifier.align(Alignment.TopStart)) {
            Text(item.emoji, style = MaterialTheme.typography.headlineSmall)
            Text(
                item.title,
                style = MaterialTheme.typography.titleMedium,
                maxLines = 1,
                overflow = TextOverflow.Ellipsis
            )
            Text(
                item.desc,
                style = MaterialTheme.typography.bodySmall,
                maxLines = 2,
                overflow = TextOverflow.Ellipsis
            )
        }
    }
}
